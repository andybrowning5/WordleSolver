
    public static String mostFreqLetters(Trie dictionary, ArrayList<String> wLeft) throws FileNotFoundException {

        ArrayList<Integer> wordsFreq = new ArrayList<>();
        File file = new File("src/Dictionary.txt");
        Scanner sc = new Scanner(file);
        int[] freq = new int[26];
        for(int j = 0; j < 26; j++){
            //System.out.println("There are " + dictionary.findFreq(0, (char) (j + 'a')) +  " letters:  " + (char)(j + 'a'));
            freq[j] = dictionary.findFreq(0, (char) (j + 'a'));
        }
        while (sc.hasNextLine()) {
            wLeft.add(sc.nextLine());
        }

        int count = 0;
        int[] highest = new int[2];
        for(int i = 0; i < wLeft.size(); i++){
            for(int j = 0; j < wLeft.get(i).length(); j++){
                count += dictionary.findFreq(0, wLeft.get(i).charAt(j));
            }
            wordsFreq.add(count);
            if(count >= highest[0] && noDuplicateChars(wLeft.get(i))){
                highest[0] = wordsFreq.get(i);
                highest[1] = i;
            }
            count = 0;
        }
        return wLeft.get(highest[1]);
    }
    public static String mostFreqLettersNoGreens(Trie dictionary, String prevGuess, String prevGreens) throws FileNotFoundException {
        ArrayList<String> words = new ArrayList<>();
        ArrayList<Integer> wordsFreq = new ArrayList<>();
        File file = new File("src/Dictionary.txt");
        Scanner sc = new Scanner(file);
        int[] freq = new int[26];

        for(int j = 0; j < 26; j++){
            //System.out.println("There are " + dictionary.findFreq(0, (char) (j + 'a')) +  " letters:  " + (char)(j + 'a'));
            freq[j] = dictionary.findFreq(0, (char) (j + 'a'));
        }

        while (sc.hasNextLine()) {
            words.add(sc.nextLine());
        }

        int count = 0;
        int[] highest = new int[2];
        boolean flag = false;
        System.out.println(prevGreens);

        for(int i = 0; i < words.size(); i++){
            for(int j = 0; j < words.get(i).length(); j++){
                for(int k = 0; k < prevGreens.length(); k++){
                    if (prevGreens.charAt(k) == words.get(i).charAt(j)) {
                        flag = true;
                        break;
                    }
                }
                if (!flag) {
                    if(noDuplicateChars(words.get(i))){
                        count += dictionary.findFreq(0, words.get(i).charAt(j));
                    }else{
                        count += dictionary.findFreq(0, words.get(i).charAt(j)) / 1.3;
                    }
                }
            }
            wordsFreq.add(count);

            if(count > highest[0]  && !Objects.equals(words.get(i), prevGuess)){

                highest[0] = wordsFreq.get(i);
                highest[1] = i;
            }
            count = 0;
        }

        return words.get(highest[1]);
    }

        public static boolean noDuplicateChars(String s){
            int[] letters = new int[26];
            for(int i = 0; i < s.length(); i++){
                letters[s.charAt(i) - 'a']++;
            }
            for(int i = 0; i < 26; i++){
                if(letters[i] > 1){
                    return false;
                }
            }
            return true;
        }

            public static String mostUsedInAll(Trie dictionary) throws FileNotFoundException {
                ArrayList<String> all = new ArrayList<>();
                File file = new File("src/Dictionary.txt");
                Scanner sc = new Scanner(file);
                int[] count = new int[2];

                while (sc.hasNextLine()) {
                    all.add(sc.nextLine());
                }

                for(int i = 0; i < all.size(); i++){
                    if(count[0] < dictionary.tUsedInWord(all.get(i), 0)){
                        count[0] = dictionary.tUsedInWord(all.get(i), 0);
                        count[1] = i;
                    }
                }

                return all.get(count[1]);
            }
                public static String greyOutput(String guess, String word){
                    StringBuilder out = new StringBuilder();
                    boolean flag;
                    for(int i = 0; i < word.length(); i++){
                        flag = false;
                        for(int j = 0; j < word.length(); j++){
                            if(guess.charAt(i) == word.charAt(j)) {
                                flag = true;
                                break;
                            }
                        }
                        if(!flag){
                            out.append(guess.charAt(i));
                        }else{
                            out.append("-");
                        }
                    }
                    return out.toString();
                }
                public static String greenOutput(String guess, String word){
                    StringBuilder out = new StringBuilder();
                    for(int i = 0; i < word.length(); i++){
                        if(guess.charAt(i) == word.charAt(i)){
                            out.append(guess.charAt(i));
                        }else{
                            out.append("-");
                        }
                    }
                    return out.toString();
                }
                public static String yellowOutput(String guess, String word){
                    StringBuilder out = new StringBuilder();
                    boolean flag;
                    for(int i = 0; i < word.length(); i++){
                        flag = false;
                        if(guess.charAt(i) != word.charAt(i)){
                            for(int j = 0; j < word.length(); j++){
                                if (guess.charAt(i) == word.charAt(j)) {
                                    flag = true;
                                    break;
                                }
                            }
                        }
                        if(flag){
                            out.append(guess.charAt(i));
                        }else{
                            out.append("-");
                        }
                    }
                    return out.toString();
                }